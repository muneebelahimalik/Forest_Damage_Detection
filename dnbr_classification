//*******************************************************************************************

// Define an SLD style of discrete intervals to apply to the image.
var sld_intervals =
  '<RasterSymbolizer>' +
    '<ColorMap type="intervals" extended="false" >' +
      '<ColorMapEntry color="#ffffff" quantity="-50" label="-500"/>' +
      '<ColorMapEntry color="#7a8737" quantity="-25" label="-250" />' +
      '<ColorMapEntry color="#acbe4d" quantity="-10" label="-100" />' +
      '<ColorMapEntry color="#0ae042" quantity="70" label="100" />' +
      '<ColorMapEntry color="#fff70b" quantity="97" label="270" />' +
      '<ColorMapEntry color="#ffaf38" quantity="114" label="440" />' +
      '<ColorMapEntry color="#ff641b" quantity="136" label="660" />' +
      '<ColorMapEntry color="#ff0000" quantity="200" label="2000" />' +
    '</ColorMap>' +
  '</RasterSymbolizer>';
//#ffffff: white, #7a8737: olive green, #acbe4d: yellow green, #0ae042: bright green, #fff70b: yellow, #ffaf38: orange, #ff641b: dark orange,#a41fd6: purple
// Add the image to the map using both the color ramp and interval schemes.
Map.addLayer(dNBR.sldStyle(sld_intervals), {}, 'dNBR classified');

// Seperate result into 8 burn severity classes
var thresholds = ee.Image([-1000, -251, -101, 99, 269, 439, 659, 2000]);
var classified = dNBR.lt(thresholds).reduce('sum').toInt();

//*******************************************************************************************
//                           PART 12: ADD A LEGEND
//*******************************************************************************************

// set position of panel
var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }});
 
// Create legend title
var legendTitle = ui.Label({
  value: 'dNBR Classes',
  style: {fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0'
    }});
 
// Add the title to the panel
legend.add(legendTitle);
 
// Creates and styles 1 row of the legend.
var makeRow = function(color, name) {
 
      // Create the label that is actually the colored box.
      var colorBox = ui.Label({
        style: {
          backgroundColor: '#' + color,
          // Use padding to give the box height and width.
          padding: '8px',
          margin: '0 0 4px 0'
        }});
 
      // Create the label filled with the description text.
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
 
      // return the panel
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      })};
 
//  Palette with the colors
var palette =['006400','228B22','0ae042', 'fff70b', 'ffaf38', 'ff641b', 'FF0000', 'ffffff'];
 
// name of the legend
var names = ['Enhanced Regrowth, High','Enhanced Regrowth, Low','Unburned', 'Low Severity',
'Moderate-low Severity', 'Moderate-high Severity', 'High Severity', 'NA'];
 
// Add color and and names
for (var i = 0; i < 8; i++) {
  legend.add(makeRow(palette[i], names[i]));
  }  
 
// add legend to map (alternatively you can also print the legend to the console)
Map.add(legend);

//-----------------------------------------------------------------------------

// Add a dummy band to the classified image
var dummyImage = classified.addBands(ee.Image(0));

// Reduce the region using the dummy image and count aggregation
var counts = dummyImage.reduceRegion({
  reducer: ee.Reducer.count().group({
    groupField: 1,
    groupName: 'severity'
  }),
  geometry: area,
  scale: 30,
  maxPixels: 1e9
});

// Convert the result to a feature collection
var features = ee.FeatureCollection(
  ee.List(counts.get('groups')).map(function(group) {
    group = ee.Dictionary(group);
    var severity = group.get('severity');
    var count = group.get('count');
    return ee.Feature(null, { 'severity': severity, 'count': count });
  })
);

// Create a column chart
var chart = ui.Chart.feature.byFeature(features, 'severity', 'count')
  .setChartType('ColumnChart')
  .setOptions({
    title: 'Burn Severity Distribution',
    hAxis: { title: 'Burn Severity' },
    vAxis: { title: 'Number of Pixels' }
  });

// Print the chart to the console
print(chart);
